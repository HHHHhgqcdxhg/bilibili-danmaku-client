{"version":3,"sources":["../src/sectors.js"],"names":["require","Buffer","charset","Sector","encode","Error","decode","Class","buf","JSONSector","data","from","JSON","stringify","parse","toString","RawSector","HeartbeatSector","HeartbeatAckSector","DataSector","InitSector","InitAckSector","alloc","module","exports"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA8BmBA,QAAQ,QAAR,C;IAAXC,M,YAAAA,M;;AAER,IAAMC,UAAU,MAAhB;AAEA;;IACMC,M;;;;;;;AACF;;;;;SAKAC,M,qBAAS;AAAE,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AAAsC,G,EAAC;;;;;AAEtD;;;;;;;;;;;;AAUAF,OAAOG,MAAP,GAAgB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAE,QAAM,IAAIH,KAAJ,CAAU,kBAAV,CAAN;AAAsC,CAAxE,C,CAA0E;;AAE1E;;;IACMI,U;;;;;AACF,sBAAYC,IAAZ,EAAkB;AAAA;;AAAE;AAAS,UAAKA,IAAL,GAAYA,IAAZ;AAAX;AAA8B;;;;UAChDN,M,qBAAS;AAAE,WAAOH,OAAOU,IAAP,CAAYC,KAAKC,SAAL,CAAe,KAAKH,IAApB,CAAZ,EAAuCR,OAAvC,CAAP;AAAyD,G;;;EAF/CC,M;;AAIzBM,WAAWH,MAAX,GAAoB,UAACC,KAAD,EAAQC,GAAR;AAAA,SAAgB,IAAID,KAAJ,CAAUK,KAAKE,KAAL,CAAWN,IAAIO,QAAJ,CAAab,OAAb,CAAX,CAAV,CAAhB;AAAA,CAApB;AAEA;;;IACMc,S;;;;;AACF,qBAAYR,GAAZ,EAAiB;AAAA;;AAAE;AAAS,WAAKA,GAAL,GAAWA,GAAX;AAAX;AAA4B;;;;UAC7CJ,M,qBAAS;AAAE,WAAO,KAAKI,GAAZ;AAAkB,G;;;EAFTL,M;;AAIxBa,UAAUV,MAAV,GAAmB,UAACC,KAAD,EAAQC,GAAR;AAAA,SAAgB,IAAID,KAAJ,CAAUC,GAAV,CAAhB;AAAA,CAAnB;;IAEMS,e;;;;;AACF,6BAAc;AAAA,WAAE,sBAAMhB,OAAOU,IAAP,CAAY,iBAAZ,EAA+BT,OAA/B,CAAN,CAAF;AAAmD;;;EADvCc,S;;IAIxBE,kB;;;;;AACF,gCAAc;AAAA,WAAE,uBAAMjB,OAAOU,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAZ,CAAN,CAAF;AAAiD;;;EADlCK,S;;IAI3BG,U;;;;;;;;;;EAAmBV,U,GAAc;;;IAEjCW,U;;;;;;;;;;EAAmBX,U,GAAc;;;IAEjCY,a;;;;;AACF,2BAAc;AAAA,WAAE,uBAAMpB,OAAOqB,KAAP,CAAa,CAAb,CAAN,CAAF;AAA2B,G,CAAC;;;;EADlBN,S;;AAI5BO,OAAOC,OAAP,GAAiB;AACbrB,gBADa;AAEba,sBAFa;AAGbP,wBAHa;AAIbQ,kCAJa;AAKbC,wCALa;AAMbC,wBANa;AAObC,wBAPa;AAQbC;AARa,CAAjB","sourcesContent":["/**\r\n * The sectors module.\r\n * This module contains class definitions for all the sectors.\r\n *\r\n * There are currently 5 types of sectors:\r\n * 1. Heartbeat sector.\r\n * 2. Heartbeat ACK sector.\r\n * 3. JSON data sector.\r\n * 4. Initialization sector.\r\n * 5. Initialization ACK sector.\r\n *\r\n * On establishment of WebSocket connection, the client sends an initialization sector,\r\n * and the server responds with an initialization ACK sector. If an initialization sector\r\n * was not send in the first 5 seconds, the connection will be closed.\r\n * Then, every 30 seconds, the client sends a heartbeat sector, and the server\r\n * responds with a heartbeat ACK sector.\r\n * During the time the connection is open, the server will send JSON data sectors\r\n * occasionlly, containing necessary data.\r\n *\r\n * It is designed that the classes in sectors.js do not know how and when these sectors\r\n * are send and received, but only their logical definitions: What / what type of data they\r\n * contain, and how should the data be encoded into binary code, that is, only the CONTENT\r\n * part of the whole sector. Other work is left to encoding.js to do.\r\n *\r\n * To identify different types of sectors, only these classes should be used, and not any\r\n * other string-ish representation.\r\n *\r\n * @module biliDanmakuClient/sectors\r\n */\r\n\r\nconst { Buffer } = require('buffer');\r\n\r\nconst charset = 'utf8';\r\n\r\n/** Base class for all sector types */\r\nclass Sector {\r\n    /**\r\n     * Encode this Sector into a Buffer object.\r\n     * This is an abstract method and should be overridden by implementations\r\n     * extending Sector.\r\n     */\r\n    encode() { throw new Error('Not implemented.'); } // eslint-disable-line class-methods-use-this\r\n}\r\n/**\r\n * Class method, decode the Buffer object into a Sector object of the given type.\r\n * Normally, this should be used like:\r\n *    MySector.decode(MySector, buf);\r\n * While the Class argument is still provided to enable overriding, as seen in JSONSector.\r\n * This is an abstract method and should be overridden by implementations extending Sector.\r\n *\r\n * @param {Function} Class The constructor of the target Sector class.\r\n * @param {Buffer} buf The buffer to decode.\r\n */\r\nSector.decode = (Class, buf) => { throw new Error('Not implemented.'); }; // eslint-disable-line no-unused-vars\r\n\r\n/** Base class for all JSON-based sector types */\r\nclass JSONSector extends Sector {\r\n    constructor(data) { super(); this.data = data; }\r\n    encode() { return Buffer.from(JSON.stringify(this.data), charset); }\r\n}\r\nJSONSector.decode = (Class, buf) => new Class(JSON.parse(buf.toString(charset)));\r\n\r\n/** Base class for all raw-buffer-based sector types */\r\nclass RawSector extends Sector {\r\n    constructor(buf) { super(); this.buf = buf; }\r\n    encode() { return this.buf; }\r\n}\r\nRawSector.decode = (Class, buf) => new Class(buf);\r\n\r\nclass HeartbeatSector extends RawSector {\r\n    constructor() { super(Buffer.from('[object Object]', charset)); }\r\n}\r\n\r\nclass HeartbeatAckSector extends RawSector {\r\n    constructor() { super(Buffer.from([0x00, 0x00, 0x00, 0x00])); }\r\n}\r\n\r\nclass DataSector extends JSONSector {} // inherit constructor\r\n\r\nclass InitSector extends JSONSector {} // inherit constructor\r\n\r\nclass InitAckSector extends RawSector {\r\n    constructor() { super(Buffer.alloc(0)); } // with empty CONTENT part\r\n}\r\n\r\nmodule.exports = {\r\n    Sector,\r\n    RawSector,\r\n    JSONSector,\r\n    HeartbeatSector,\r\n    HeartbeatAckSector,\r\n    DataSector,\r\n    InitSector,\r\n    InitAckSector,\r\n};\r\n"],"file":"sectors.js"}