"use strict";

require("core-js/modules/es6.object.assign");

var Transformer = require('./Transformer');

var compile = require('./compile');

var _require = require('./helpers'),
    asFlag = _require.asFlag,
    onWhen = _require.onWhen,
    on = _require.on,
    onExist = _require.onExist,
    spread = _require.spread,
    spreadObj = _require.spreadObj; // live start & end


var liveEnd = new Transformer('PREPARING', 'liveEnd', spreadObj(['roomid', parseInt, function () {
  return 'roomId';
}]));
var liveStart = new Transformer('LIVE', 'liveStart', spreadObj(['roomid', parseInt, function () {
  return 'roomId';
}])); // danmaku

var danmaku = new Transformer('DANMU_MSG', 'danmaku', on(function (m) {
  return m.info;
}, {
  timestamp: function timestamp(i) {
    return i[0][4];
  },
  content: function content(i) {
    return i[1];
  },
  sender: on(function (i) {
    return i[2];
  }, spread('uid', 'name', ['isOwner', asFlag], ['isVip', asFlag], ['isSvip', asFlag])),
  badge: onExist(function (i) {
    return i[3];
  }, spread('level', 'name', 'owner', 'roomId')),
  ul: on(function (i) {
    return i[4];
  }, {
    ranking: function ranking(u) {
      return u[3];
    },
    level: function level(u) {
      return u[0];
    }
  }),
  medal: onExist(function (i) {
    return i[5];
  }, spread('first', 'second'))
})); // gift

var userSrc = spreadObj('face', 'uid', 'guard_level', ['uname', undefined, function () {
  return 'name';
}]);
var parseTopUser = compile(Object.assign({}, userSrc, spreadObj('rank', 'score', ['isSelf', asFlag])));
var gift = new Transformer('SEND_GIFT', 'gift', on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('giftName', 'giftId', 'giftType', 'num', 'remain', 'price', 'action', 'timestamp', 'coin_type', 'total_coin', 'super_gift_num', 'effect_block'), {
  sender: userSrc,
  left: onWhen(function (m) {
    return m;
  }, function (m) {
    return m.gold > 0 && m.silver > 0;
  }, spreadObj('gold', 'silver')),
  topList: function topList(d) {
    return d.top_list.map(parseTopUser);
  }
})));
var tempoStorm = new Transformer('SPECIAL_GIFT', 'tempoStorm', on(function (m) {
  return m.data[39];
}, Object.assign({}, spreadObj('action', 'id'), {
  storm: onWhen(function (d) {
    return d;
  }, function (d) {
    return d.action === 'start';
  }, spreadObj('content', 'time', 'storm_gif', ['hadJoin', undefined, function () {
    return 'joined';
  }], 'num'))
})));
var comboEnd = new Transformer('COMBO_END', 'comboEnd', on(function (m) {
  return m.data;
}, spreadObj('price', 'gift_id', 'gift_name', 'combo_num', 'price', 'gift_id', 'start_time', 'end_time', ['uname', undefined, function () {
  return 'name';
}], // sender name
['r_uname', undefined, function () {
  return 'owner';
}] // name of room owner
))); // broadcast message

var guardMsg = new Transformer('GUARD_MSG', 'guardMsg', spreadObj('msg', ['buy_type', undefined, function () {
  return 'guardLevel';
}]));
var sysMsg = new Transformer('SYS_MSG', 'sysMsg', spreadObj('msg', 'rep', 'styleType', 'url', 'msg_text', ['real_roomid', undefined, function () {
  return 'realRoomId';
}], ['roomid', undefined, function () {
  return 'roomId';
}])); // welcome

var welcomeVip = new Transformer('WELCOME', 'welcomeVip', on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('uid', ['uname', undefined, function () {
  return 'name';
}], ['is_admin', asFlag]), {
  isVip: function isVip(d) {
    return 'vip' in d && d.vip === 1 || 'svip' in d && d.svip === 1;
  },
  isSvip: function isSvip(d) {
    return 'svip' in d && d.svip === 1;
  }
})));
var welcomeGuard = new Transformer('WELCOME_GUARD', 'welcomeGuard', on(function (m) {
  return m.data;
}, spreadObj('uid', 'guard_level', ['username', undefined, function () {
  return 'name';
}]))); // events

var wishBottle = new Transformer('WISH_BOTTLE', 'wishBottle', on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('action', 'id'), {
  wish: on(function (m) {
    return m.wish;
  }, spreadObj('content', 'status', 'type', 'type_id', 'uid', 'wish_limit', 'wish_progress', 'count_map', ['ctime', function (str) {
    return new Date(str).getTime();
  }, function () {
    return 'timestamp';
  }], ['uid', undefined, function () {
    return 'anchor';
  }]))
})));
var roomRank = new Transformer('ROOM_RANK', 'roomRank', on(function (m) {
  return m.data;
}, spreadObj('timestamp', 'color', 'h5_url', 'web_url', ['roomid', undefined, function () {
  return 'roomId';
}], ['rank_desc', undefined, function () {
  return 'rank';
}])));
var guardBuy = new Transformer('GUARD_BUY', 'guardBuy', Object.assign({}, on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('guard_level', 'num'), {
  buyer: spreadObj(['username', undefined, function () {
    return 'name';
  }], 'uid')
})), spreadObj(['roomid', parseInt, function () {
  return 'roomId';
}]))); // blocking

var blockUser = new Transformer('ROOM_BLOCK_MSG', 'blockUser', {
  roomId: function roomId(m) {
    return m.roomid;
  },
  blocked: spreadObj(['uid', parseInt], ['uname', null, function () {
    return 'name';
  }])
});
var silentOn = new Transformer('ROOM_SILENT_ON', 'silentOn', Object.assign({
  roomId: function roomId(m) {
    return m.roomid;
  }
}, on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('type', 'second'), onWhen(function (d) {
  return d;
}, function (d) {
  return d.type === 'level';
}, spreadObj('level'))))));
var silentOff = new Transformer('ROOM_SILENT_OFF', 'silentOff', spreadObj(['roomid', parseInt, function () {
  return 'roomId`';
}]));
module.exports = [liveStart, liveEnd, danmaku, gift, tempoStorm, comboEnd, guardMsg, sysMsg, welcomeVip, welcomeGuard, wishBottle, roomRank, guardBuy, blockUser, silentOn, silentOff];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvZGVmaW5pdGlvbnMuanMiXSwibmFtZXMiOlsiVHJhbnNmb3JtZXIiLCJyZXF1aXJlIiwiY29tcGlsZSIsImFzRmxhZyIsIm9uV2hlbiIsIm9uIiwib25FeGlzdCIsInNwcmVhZCIsInNwcmVhZE9iaiIsImxpdmVFbmQiLCJwYXJzZUludCIsImxpdmVTdGFydCIsImRhbm1ha3UiLCJtIiwiaW5mbyIsInRpbWVzdGFtcCIsImkiLCJjb250ZW50Iiwic2VuZGVyIiwiYmFkZ2UiLCJ1bCIsInJhbmtpbmciLCJ1IiwibGV2ZWwiLCJtZWRhbCIsInVzZXJTcmMiLCJ1bmRlZmluZWQiLCJwYXJzZVRvcFVzZXIiLCJnaWZ0IiwiZGF0YSIsImxlZnQiLCJnb2xkIiwic2lsdmVyIiwidG9wTGlzdCIsImQiLCJ0b3BfbGlzdCIsIm1hcCIsInRlbXBvU3Rvcm0iLCJzdG9ybSIsImFjdGlvbiIsImNvbWJvRW5kIiwiZ3VhcmRNc2ciLCJzeXNNc2ciLCJ3ZWxjb21lVmlwIiwiaXNWaXAiLCJ2aXAiLCJzdmlwIiwiaXNTdmlwIiwid2VsY29tZUd1YXJkIiwid2lzaEJvdHRsZSIsIndpc2giLCJEYXRlIiwic3RyIiwiZ2V0VGltZSIsInJvb21SYW5rIiwiZ3VhcmRCdXkiLCJidXllciIsImJsb2NrVXNlciIsInJvb21JZCIsInJvb21pZCIsImJsb2NrZWQiLCJzaWxlbnRPbiIsInR5cGUiLCJzaWxlbnRPZmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBTUEsY0FBY0MsUUFBUSxlQUFSLENBQXBCOztBQUNBLElBQU1DLFVBQVVELFFBQVEsV0FBUixDQUFoQjs7ZUFDMkRBLFFBQVEsV0FBUixDO0lBQW5ERSxNLFlBQUFBLE07SUFBUUMsTSxZQUFBQSxNO0lBQVFDLEUsWUFBQUEsRTtJQUFJQyxPLFlBQUFBLE87SUFBU0MsTSxZQUFBQSxNO0lBQVFDLFMsWUFBQUEsUyxFQUU3Qzs7O0FBQ0EsSUFBTUMs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ckIsQ0FBVixDQURjLENBQWxCO0FBR0FzRCxPQUFPQyxPQUFQLEdBQWlCLENBQ2J0RCxTQURhLEVBRWJGLE9BRmEsRUFHYkcsT0FIYSxFQUliZ0IsSUFKYSxFQUtiUyxVQUxhLEVBTWJHLFFBTmEsRUFPYkMsUUFQYSxFQVFiQyxNQVJhLEVBU2JDLFVBVGEsRUFVYkssWUFWYSxFQVdiQyxVQVhhLEVBWWJLLFFBWmEsRUFhYkMsUUFiYSxFQWNiRSxTQWRhLEVBZWJJLFFBZmEsRUFnQmJFLFNBaEJhLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuL1RyYW5zZm9ybWVyJyk7XHJcbmNvbnN0IGNvbXBpbGUgPSByZXF1aXJlKCcuL2NvbXBpbGUnKTtcclxuY29uc3QgeyBhc0ZsYWcsIG9uV2hlbiwgb24sIG9uRXhpc3QsIHNwcmVhZCwgc3ByZWFkT2JqIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcclxuXHJcbi8vIGxpdmUgc3RhcnQgJiBlbmRcclxuY29uc3QgbGl2ZUVuZCA9IG5ldyBUcmFuc2Zvcm1lcignUFJFUEFSSU5HJywgJ2xpdmVFbmQnLFxyXG4gICAgc3ByZWFkT2JqKFsncm9vbWlkJywgcGFyc2VJbnQsICgpID0+ICdyb29tSWQnXSkpO1xyXG5jb25zdCBsaXZlU3RhcnQgPSBuZXcgVHJhbnNmb3JtZXIoJ0xJVkUnLCAnbGl2ZVN0YXJ0JyxcclxuICAgIHNwcmVhZE9iaihbJ3Jvb21pZCcsIHBhcnNlSW50LCAoKSA9PiAncm9vbUlkJ10pKTtcclxuXHJcbi8vIGRhbm1ha3VcclxuY29uc3QgZGFubWFrdSA9IG5ldyBUcmFuc2Zvcm1lcignREFOTVVfTVNHJywgJ2Rhbm1ha3UnLCBvbihtID0+IG0uaW5mbywge1xyXG4gICAgdGltZXN0YW1wOiBpID0+IGlbMF1bNF0sXHJcbiAgICBjb250ZW50OiBpID0+IGlbMV0sXHJcbiAgICBzZW5kZXI6IG9uKGkgPT4gaVsyXSwgc3ByZWFkKCd1aWQnLCAnbmFtZScsIFsnaXNPd25lcicsIGFzRmxhZ10sIFsnaXNWaXAnLCBhc0ZsYWddLCBbJ2lzU3ZpcCcsIGFzRmxhZ10pKSxcclxuICAgIGJhZGdlOiBvbkV4aXN0KGkgPT4gaVszXSwgc3ByZWFkKCdsZXZlbCcsICduYW1lJywgJ293bmVyJywgJ3Jvb21JZCcpKSxcclxuICAgIHVsOiBvbihpID0+IGlbNF0sIHtcclxuICAgICAgICByYW5raW5nOiB1ID0+IHVbM10sXHJcbiAgICAgICAgbGV2ZWw6IHUgPT4gdVswXSxcclxuICAgIH0pLFxyXG4gICAgbWVkYWw6IG9uRXhpc3QoaSA9PiBpWzVdLCBzcHJlYWQoJ2ZpcnN0JywgJ3NlY29uZCcpKSxcclxufSkpO1xyXG5cclxuLy8gZ2lmdFxyXG5jb25zdCB1c2VyU3JjID0gc3ByZWFkT2JqKFxyXG4gICAgJ2ZhY2UnLCAndWlkJywgJ2d1YXJkX2xldmVsJyxcclxuICAgIFsndW5hbWUnLCB1bmRlZmluZWQsICgpID0+ICduYW1lJ10sXHJcbik7XHJcbmNvbnN0IHBhcnNlVG9wVXNlciA9IGNvbXBpbGUoe1xyXG4gICAgLi4udXNlclNyYywgLi4uc3ByZWFkT2JqKCdyYW5rJywgJ3Njb3JlJywgWydpc1NlbGYnLCBhc0ZsYWddKSxcclxufSk7XHJcbmNvbnN0IGdpZnQgPSBuZXcgVHJhbnNmb3JtZXIoJ1NFTkRfR0lGVCcsICdnaWZ0Jywgb24obSA9PiBtLmRhdGEsIHtcclxuICAgIC4uLnNwcmVhZE9iaihcclxuICAgICAgICAnZ2lmdE5hbWUnLCAnZ2lmdElkJywgJ2dpZnRUeXBlJywgJ251bScsICdyZW1haW4nLCAncHJpY2UnLCAnYWN0aW9uJywgJ3RpbWVzdGFtcCcsXHJcbiAgICAgICAgJ2NvaW5fdHlwZScsICd0b3RhbF9jb2luJywgJ3N1cGVyX2dpZnRfbnVtJywgJ2VmZmVjdF9ibG9jaycsXHJcbiAgICApLFxyXG4gICAgc2VuZGVyOiB1c2VyU3JjLFxyXG4gICAgbGVmdDogb25XaGVuKG0gPT4gbSwgbSA9PiBtLmdvbGQgPiAwICYmIG0uc2lsdmVyID4gMCwgc3ByZWFkT2JqKCdnb2xkJywgJ3NpbHZlcicpKSxcclxuICAgIHRvcExpc3Q6IGQgPT4gZC50b3BfbGlzdC5tYXAocGFyc2VUb3BVc2VyKSxcclxufSkpO1xyXG5jb25zdCB0ZW1wb1N0b3JtID0gbmV3IFRyYW5zZm9ybWVyKCdTUEVDSUFMX0dJRlQnLCAndGVtcG9TdG9ybScsIG9uKG0gPT4gbS5kYXRhWzM5XSwge1xyXG4gICAgLi4uc3ByZWFkT2JqKCdhY3Rpb24nLCAnaWQnKSxcclxuICAgIHN0b3JtOiBvbldoZW4oZCA9PiBkLCBkID0+IGQuYWN0aW9uID09PSAnc3RhcnQnLCBzcHJlYWRPYmooXHJcbiAgICAgICAgJ2NvbnRlbnQnLCAndGltZScsICdzdG9ybV9naWYnLCBbJ2hhZEpvaW4nLCB1bmRlZmluZWQsICgpID0+ICdqb2luZWQnXSwgJ251bScsXHJcbiAgICApKSxcclxufSkpO1xyXG5jb25zdCBjb21ib0VuZCA9IG5ldyBUcmFuc2Zvcm1lcignQ09NQk9fRU5EJywgJ2NvbWJvRW5kJywgb24obSA9PiBtLmRhdGEsIHNwcmVhZE9iaihcclxuICAgICdwcmljZScsICdnaWZ0X2lkJywgJ2dpZnRfbmFtZScsICdjb21ib19udW0nLCAncHJpY2UnLCAnZ2lmdF9pZCcsICdzdGFydF90aW1lJywgJ2VuZF90aW1lJyxcclxuICAgIFsndW5hbWUnLCB1bmRlZmluZWQsICgpID0+ICduYW1lJ10sIC8vIHNlbmRlciBuYW1lXHJcbiAgICBbJ3JfdW5hbWUnLCB1bmRlZmluZWQsICgpID0+ICdvd25lciddLCAvLyBuYW1lIG9mIHJvb20gb3duZXJcclxuKSkpO1xyXG5cclxuLy8gYnJvYWRjYXN0IG1lc3NhZ2VcclxuY29uc3QgZ3VhcmRNc2cgPSBuZXcgVHJhbnNmb3JtZXIoJ0dVQVJEX01TRycsICdndWFyZE1zZycsXHJcbiAgICBzcHJlYWRPYmooJ21zZycsIFsnYnV5X3R5cGUnLCB1bmRlZmluZWQsICgpID0+ICdndWFyZExldmVsJ10pKTtcclxuY29uc3Qgc3lzTXNnID0gbmV3IFRyYW5zZm9ybWVyKCdTWVNfTVNHJywgJ3N5c01zZycsIHNwcmVhZE9iaihcclxuICAgICdtc2cnLCAncmVwJywgJ3N0eWxlVHlwZScsICd1cmwnLCAnbXNnX3RleHQnLFxyXG4gICAgWydyZWFsX3Jvb21pZCcsIHVuZGVmaW5lZCwgKCkgPT4gJ3JlYWxSb29tSWQnXSxcclxuICAgIFsncm9vbWlkJywgdW5kZWZpbmVkLCAoKSA9PiAncm9vbUlkJ10sXHJcbikpO1xyXG5cclxuLy8gd2VsY29tZVxyXG5jb25zdCB3ZWxjb21lVmlwID0gbmV3IFRyYW5zZm9ybWVyKCdXRUxDT01FJywgJ3dlbGNvbWVWaXAnLCBvbihtID0+IG0uZGF0YSwge1xyXG4gICAgLi4uc3ByZWFkT2JqKCd1aWQnLCBbJ3VuYW1lJywgdW5kZWZpbmVkLCAoKSA9PiAnbmFtZSddLCBbJ2lzX2FkbWluJywgYXNGbGFnXSksXHJcbiAgICBpc1ZpcDogZCA9PiAoJ3ZpcCcgaW4gZCAmJiBkLnZpcCA9PT0gMSkgfHwgKCdzdmlwJyBpbiBkICYmIGQuc3ZpcCA9PT0gMSksXHJcbiAgICBpc1N2aXA6IGQgPT4gKCdzdmlwJyBpbiBkICYmIGQuc3ZpcCA9PT0gMSksXHJcbn0pKTtcclxuY29uc3Qgd2VsY29tZUd1YXJkID0gbmV3IFRyYW5zZm9ybWVyKCdXRUxDT01FX0dVQVJEJywgJ3dlbGNvbWVHdWFyZCcsIG9uKG0gPT4gbS5kYXRhLCBzcHJlYWRPYmooXHJcbiAgICAndWlkJywgJ2d1YXJkX2xldmVsJywgWyd1c2VybmFtZScsIHVuZGVmaW5lZCwgKCkgPT4gJ25hbWUnXSxcclxuKSkpO1xyXG5cclxuLy8gZXZlbnRzXHJcbmNvbnN0IHdpc2hCb3R0bGUgPSBuZXcgVHJhbnNmb3JtZXIoJ1dJU0hfQk9UVExFJywgJ3dpc2hCb3R0bGUnLCBvbihtID0+IG0uZGF0YSwge1xyXG4gICAgLi4uc3ByZWFkT2JqKCdhY3Rpb24nLCAnaWQnKSxcclxuICAgIHdpc2g6IG9uKG0gPT4gbS53aXNoLCBzcHJlYWRPYmooXHJcbiAgICAgICAgJ2NvbnRlbnQnLCAnc3RhdHVzJywgJ3R5cGUnLCAndHlwZV9pZCcsICd1aWQnLCAnd2lzaF9saW1pdCcsICd3aXNoX3Byb2dyZXNzJywgJ2NvdW50X21hcCcsXHJcbiAgICAgICAgWydjdGltZScsIHN0ciA9PiBuZXcgRGF0ZShzdHIpLmdldFRpbWUoKSwgKCkgPT4gJ3RpbWVzdGFtcCddLFxyXG4gICAgICAgIFsndWlkJywgdW5kZWZpbmVkLCAoKSA9PiAnYW5jaG9yJ10sXHJcbiAgICApKSxcclxufSkpO1xyXG5jb25zdCByb29tUmFuayA9IG5ldyBUcmFuc2Zvcm1lcignUk9PTV9SQU5LJywgJ3Jvb21SYW5rJywgb24obSA9PiBtLmRhdGEsIHNwcmVhZE9iaihcclxuICAgICd0aW1lc3RhbXAnLCAnY29sb3InLCAnaDVfdXJsJywgJ3dlYl91cmwnLFxyXG4gICAgWydyb29taWQnLCB1bmRlZmluZWQsICgpID0+ICdyb29tSWQnXSxcclxuICAgIFsncmFua19kZXNjJywgdW5kZWZpbmVkLCAoKSA9PiAncmFuayddLFxyXG4pKSk7XHJcbmNvbnN0IGd1YXJkQnV5ID0gbmV3IFRyYW5zZm9ybWVyKCdHVUFSRF9CVVknLCAnZ3VhcmRCdXknLCB7XHJcbiAgICAuLi5vbihtID0+IG0uZGF0YSwge1xyXG4gICAgICAgIC4uLnNwcmVhZE9iaignZ3VhcmRfbGV2ZWwnLCAnbnVtJyksXHJcbiAgICAgICAgYnV5ZXI6IHNwcmVhZE9iaihbJ3VzZXJuYW1lJywgdW5kZWZpbmVkLCAoKSA9PiAnbmFtZSddLCAndWlkJyksXHJcbiAgICB9KSxcclxuICAgIC4uLnNwcmVhZE9iaihbJ3Jvb21pZCcsIHBhcnNlSW50LCAoKSA9PiAncm9vbUlkJ10pLFxyXG59KTtcclxuXHJcbi8vIGJsb2NraW5nXHJcbmNvbnN0IGJsb2NrVXNlciA9IG5ldyBUcmFuc2Zvcm1lcignUk9PTV9CTE9DS19NU0cnLCAnYmxvY2tVc2VyJywge1xyXG4gICAgcm9vbUlkOiBtID0+IG0ucm9vbWlkLFxyXG4gICAgYmxvY2tlZDogc3ByZWFkT2JqKFsndWlkJywgcGFyc2VJbnRdLCBbJ3VuYW1lJywgbnVsbCwgKCkgPT4gJ25hbWUnXSksXHJcbn0pO1xyXG5jb25zdCBzaWxlbnRPbiA9IG5ldyBUcmFuc2Zvcm1lcignUk9PTV9TSUxFTlRfT04nLCAnc2lsZW50T24nLCB7XHJcbiAgICByb29tSWQ6IG0gPT4gbS5yb29taWQsXHJcbiAgICAuLi5vbihtID0+IG0uZGF0YSwge1xyXG4gICAgICAgIC4uLnNwcmVhZE9iaigndHlwZScsICdzZWNvbmQnKSxcclxuICAgICAgICAuLi5vbldoZW4oZCA9PiBkLCBkID0+IGQudHlwZSA9PT0gJ2xldmVsJywgc3ByZWFkT2JqKCdsZXZlbCcpKSxcclxuICAgIH0pLFxyXG59KTtcclxuY29uc3Qgc2lsZW50T2ZmID0gbmV3IFRyYW5zZm9ybWVyKCdST09NX1NJTEVOVF9PRkYnLCAnc2lsZW50T2ZmJyxcclxuICAgIHNwcmVhZE9iaihbJ3Jvb21pZCcsIHBhcnNlSW50LCAoKSA9PiAncm9vbUlkYCddKSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFtcclxuICAgIGxpdmVTdGFydCxcclxuICAgIGxpdmVFbmQsXHJcbiAgICBkYW5tYWt1LFxyXG4gICAgZ2lmdCxcclxuICAgIHRlbXBvU3Rvcm0sXHJcbiAgICBjb21ib0VuZCxcclxuICAgIGd1YXJkTXNnLFxyXG4gICAgc3lzTXNnLFxyXG4gICAgd2VsY29tZVZpcCxcclxuICAgIHdlbGNvbWVHdWFyZCxcclxuICAgIHdpc2hCb3R0bGUsXHJcbiAgICByb29tUmFuayxcclxuICAgIGd1YXJkQnV5LFxyXG4gICAgYmxvY2tVc2VyLFxyXG4gICAgc2lsZW50T24sXHJcbiAgICBzaWxlbnRPZmYsXHJcbl07XHJcbiJdfQ==