{"version":3,"sources":["../../src/transformers/helpers.js"],"names":["require","isEmpty","negate","isString","isFunction","isArray","isObject","fromPairs","conformsTo","defaults","camelCase","compile","asFlag","input","onWhen","mapper","predicate","src","compiled","on","onExist","convertNames","names","map","name","arr","mapVal","mapKey","obj","v","spread","converted","index","undefined","a","filter","spreadObj","o","module","exports"],"mappings":"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","sourcesContent":["const { isEmpty, negate, isString, isFunction, isArray, isObject, fromPairs, conformsTo, defaults, camelCase } = require('lodash');\r\n\r\nconst compile = require('./compile');\r\n\r\n// helper methods\r\nconst asFlag = input => !!input;\r\nconst onWhen = (mapper, predicate, src) => {\r\n    const compiled = compile(src);\r\n    return input => (predicate(mapper(input)) ? compiled(mapper(input)) : null);\r\n};\r\nconst on = (mapper, src) => onWhen(mapper, () => true, src);\r\nconst onExist = (mapper, src) => onWhen(mapper, negate(isEmpty), src);\r\nconst convertNames = (...names) => names\r\n    .map(name => (isString(name) ? [name] : name))\r\n    .map((arr) => {\r\n        if (!isArray(arr)) return null;\r\n        const [name, mapVal, mapKey] = arr;\r\n        const obj = defaults({ name, mapVal, mapKey }, { mapVal: v => v, mapKey: camelCase });\r\n        return conformsTo(obj, { name: isString, mapVal: isFunction, mapKey: isFunction }) ?\r\n            obj : null;\r\n    });\r\nconst spread = (...names) => fromPairs(convertNames(...names)\r\n    .map((converted, index) => {\r\n        if (!isObject(converted)) return undefined;\r\n        const { name, mapVal, mapKey } = converted;\r\n        return [mapKey(name), a => mapVal(a[index])];\r\n    }).filter(isArray));\r\nconst spreadObj = (...names) => fromPairs(convertNames(...names)\r\n    .filter(isObject).map(({ name, mapVal, mapKey }) => [mapKey(name), o => mapVal(o[name])]));\r\n\r\nmodule.exports = { asFlag, onWhen, on, onExist, convertNames, spread, spreadObj };\r\n"],"file":"helpers.js"}