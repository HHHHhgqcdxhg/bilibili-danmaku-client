"use strict";

require("core-js/modules/es6.object.assign");

/**
 * definitions.js describes the Definitions of Application Events.
 * For the concept of Definition, see compile.js.
 * For the concept of Application Events, see Wiki page 'Application Protocol'.
 *
 * This file does not contain much documentation because:
 * - It makes use of Tramsformer.js, compile.js and helpers.js, which are well-
 *   documented.
 * - The code of Definitions are very easy to read and understand.
 * - The details of how JSONs before transformation look like and how Events
 *   after transformation look like are documented in a separate Wiki page
 *   'Events'. That should be the first source of information, not this file.
 *
 * Therefore, the following transformers are NOT documented. My apologies.
 */
var _require = require('lodash'),
    fromPairs = _require.fromPairs;

var Transformer = require('./Transformer');

var compile = require('./compile');

var _require2 = require('./helpers'),
    asFlag = _require2.asFlag,
    onWhen = _require2.onWhen,
    on = _require2.on,
    onExist = _require2.onExist,
    spread = _require2.spread,
    spreadObj = _require2.spreadObj; // live start & end


var liveEnd = new Transformer('PREPARING', 'liveEnd', spreadObj(['roomid', parseInt, 'roomId']));
var liveStart = new Transformer('LIVE', 'liveStart', spreadObj(['roomid', parseInt, 'roomId'])); // danmaku

var danmaku = new Transformer('DANMU_MSG', 'danmaku', on(function (m) {
  return m.info;
}, {
  timestamp: function timestamp(i) {
    return i[0][3];
  },
  content: function content(i) {
    return i[1];
  },
  sender: on(function (i) {
    return i[2];
  }, spread('uid', 'name', ['isOwner', asFlag], ['isVip', asFlag], ['isSvip', asFlag])),
  badge: onExist(function (i) {
    return i[3];
  }, spread('level', 'name', 'owner', 'roomId')),
  ul: on(function (i) {
    return i[4];
  }, {
    ranking: function ranking(u) {
      return u[3];
    },
    level: function level(u) {
      return u[0];
    }
  }),
  medal: onExist(function (i) {
    return i[5];
  }, spread('first', 'second'))
})); // gift

var userSrc = spreadObj('face', 'uid', 'guard_level', ['uname', 0, 'name']);
var parseTopUser = compile(Object.assign({}, userSrc, spreadObj('rank', ['score', 0, 'spentCoins'], ['isSelf', asFlag])));
var gift = new Transformer('SEND_GIFT', 'gift', on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('num', 'remain', 'action', 'timestamp', 'coin_type', 'total_coin', 'super_gift_num', 'effect_block'), {
  gift: spreadObj(['giftName', 0, 'name'], ['giftId', 0, 'id'], ['giftType', 0, 'type'], 'price'),
  sender: userSrc,
  left: onWhen(function (m) {
    return m;
  }, function (m) {
    return m.gold > 0 && m.silver > 0;
  }, spreadObj('gold', 'silver')),
  topList: function topList(d) {
    return d.top_list.map(parseTopUser);
  }
})));
var tempoStorm = new Transformer('SPECIAL_GIFT', 'tempoStorm', on(function (m) {
  return m.data[39];
}, Object.assign({}, spreadObj('action', 'id'), {
  storm: onWhen(function (d) {
    return d;
  }, function (d) {
    return d.action === 'start';
  }, spreadObj('content', 'time', 'storm_gif', ['hadJoin', 0, 'joined'], 'num'))
})));
var comboEnd = new Transformer('COMBO_END', 'comboEnd', on(function (m) {
  return m.data;
}, spreadObj('price', 'gift_id', 'gift_name', 'combo_num', 'price', 'gift_id', 'start_time', 'end_time', ['uname', 0, 'name'], ['r_uname', 0, 'owner']))); // broadcast message

var guardMsg = new Transformer('GUARD_MSG', 'guardMsg', spreadObj('msg', ['buy_type', 0, 'guardLevel']));
var sysMsg = new Transformer('SYS_MSG', 'sysMsg', spreadObj('msg', 'rep', 'styleType', 'url', 'msg_text', ['real_roomid', 0, 'realRoomId'], ['roomid', 0, 'roomId'])); // welcome

var welcomeVip = new Transformer('WELCOME', 'welcomeVip', on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('uid', ['uname', 0, 'name'], ['is_admin', asFlag]), {
  isVip: function isVip(d) {
    return 'vip' in d && d.vip === 1 || 'svip' in d && d.svip === 1;
  },
  isSvip: function isSvip(d) {
    return 'svip' in d && d.svip === 1;
  }
})));
var welcomeGuard = new Transformer('WELCOME_GUARD', 'welcomeGuard', on(function (m) {
  return m.data;
}, spreadObj('uid', 'guard_level', ['username', 0, 'name']))); // events

var wishBottle = new Transformer('WISH_BOTTLE', 'wishBottle', on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('action', 'id'), {
  wish: on(function (m) {
    return m.wish;
  }, spreadObj('content', 'status', 'type', 'type_id', 'uid', 'wish_limit', 'wish_progress', 'count_map', ['ctime', function (str) {
    return new Date(str).getTime();
  }, 'timestamp'], ['uid', 0, 'anchor']))
})));
var roomRank = new Transformer('ROOM_RANK', 'roomRank', on(function (m) {
  return m.data;
}, spreadObj('timestamp', 'color', 'h5_url', 'web_url', ['roomid', 0, 'roomId'], ['rank_desc', 0, 'rank'])));
var guardBuy = new Transformer('GUARD_BUY', 'guardBuy', Object.assign({}, on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('guard_level', 'num'), {
  buyer: spreadObj(['username', undefined, function () {
    return 'name';
  }], 'uid')
})), spreadObj(['roomid', parseInt, function () {
  return 'roomId';
}]))); // blocking

var blockUser = new Transformer('ROOM_BLOCK_MSG', 'blockUser', {
  roomId: function roomId(m) {
    return m.roomid;
  },
  blocked: spreadObj(['uid', parseInt], ['uname', 0, 'name'])
});
var silentOn = new Transformer('ROOM_SILENT_ON', 'silentOn', Object.assign({
  roomId: function roomId(m) {
    return m.roomid;
  }
}, on(function (m) {
  return m.data;
}, Object.assign({}, spreadObj('type', 'second'), onWhen(function (d) {
  return d;
}, function (d) {
  return d.type === 'level';
}, spreadObj('level'))))));
var silentOff = new Transformer('ROOM_SILENT_OFF', 'silentOff', spreadObj(['roomid', parseInt, 'roomId']));
var transformers = [liveStart, liveEnd, danmaku, gift, tempoStorm, comboEnd, guardMsg, sysMsg, welcomeVip, welcomeGuard, wishBottle, roomRank, guardBuy, blockUser, silentOn, silentOff];
var registry = fromPairs(transformers.map(function (t) {
  return [t.cmd, t];
}));
module.exports = {
  transformers: transformers,
  registry: registry
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,