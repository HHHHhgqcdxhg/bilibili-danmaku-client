{"version":3,"sources":["../src/middlewares.js"],"names":["require","defaultsDeep","fromPairs","log","InitSector","InitAckSector","HeartbeatSector","DataSector","all","Middleware","config","defaultConf","configFn","ws","conf","client","merged","sendInitial","on","send","initial","uid","roomid","room","protover","platform","clientver","invokeTransformer","sector","msg","data","cmd","transformers","transformer","emit","name","transform","map","t","logUntransformed","sendHeartbeat","heartbeat","enabled","handle","setInterval","interval","clear","clearInterval","logLifecycle","logging","url","code","reason","error","middlewares","module","exports","Object","keys","key"],"mappings":"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","sourcesContent":["/**\r\n * The middlewares module.\r\n * This module contain the class definition of Middleware and implementations of most\r\n * middlewares used by DanmakuClient. Up till now, only the middleware that manages\r\n * the lifecycle of DanmakuClient isn't included in middlewares.js, which has good\r\n * reasons to do so. For more information, see documentation of manageLifecycle in\r\n * DanmakuClient.js.\r\n *\r\n * When writing new Middlewares, it is recommended that implementations only take\r\n * advantage of the following knowledge to avoid breaking functionalities\r\n * accidentally:\r\n * 1. DanmakuClient extends EventEmitter, and 'terminating' is a reserved event name.\r\n * 2. config() of middleware takes a SectorSocket, a merged conf object, and a\r\n *    DanmakuClient instance as arguments.\r\n * 3. Raw conf objects are merged with the default conf object using lodash.defaultsDeep().\r\n *\r\n * @module biliDanmakuClient/middlewares\r\n */\r\n\r\nconst { defaultsDeep, fromPairs } = require('lodash');\r\nconst log = require('debug')('bilibili-danmaku-client/middlewares');\r\n\r\nconst { InitSector, InitAckSector, HeartbeatSector, DataSector } = require('./sectors');\r\nconst { all } = require('./transformers');\r\n\r\n/**\r\n * Middleware are used to config the SectorSocket and the DanmakuClient instance.\r\n * Middleware instances can be reused arbitrary times, across different SectorSocket\r\n * and DanmakuClient instances. In fact, it can be called multiple times in an\r\n * keepAlive connection.\r\n */\r\nclass Middleware {\r\n    /**\r\n     * Constructs the Middleware instance.\r\n     * Different middlewares do not create new classes. Instead, middlewares are merely\r\n     * a config function and a default conf object, and using the constructor of\r\n     * Middleware to create instances. The Middleware class is to enable the\r\n     * middleware.config() pattern and add conf merging ability.\r\n     *\r\n     * @param {Function} config The config function.\r\n     * @param {*} defaultConf The default conf object, optional.\r\n     * @see #config\r\n     */\r\n    constructor(config, defaultConf = {}) {\r\n        this.configFn = config;\r\n        this.defaultConf = defaultConf;\r\n    }\r\n\r\n    /**\r\n     * Config the Middleware with the given parameters.\r\n     * The conf parameter is the raw input without default values, since config()\r\n     * merges it with this.defaultConf and builds the actual conf object and call\r\n     * this.configFn() to run the configuration.\r\n     *\r\n     * There are some attributes that are merged automatically and do not need\r\n     * to be merged by middlewares:\r\n     *     url: The url that the SectorSocket is connecting to.\r\n     *     room: The room that the SectorSocket is watching.\r\n     *     uid: The contextual user id. 0 if not specified.\r\n     *     options: The options object passed into constructor of Websocket, to support\r\n     *              customization of the connection.\r\n     *\r\n     * @param {SectorSocket} ws The SectorSocket instance.\r\n     * @param {*} conf The raw config object.\r\n     * @param {DanmakuClient} client The DanmakuClient instance.\r\n     */\r\n    config(ws, conf, client) {\r\n        const merged = defaultsDeep(conf, this.defaultConf);\r\n        this.configFn(ws, merged, client);\r\n    }\r\n}\r\n\r\nconst sendInitial = new Middleware(\r\n    (ws, conf) => ws.on('open', () => {\r\n        ws.send(new InitSector({\r\n            ...conf.initial,\r\n            uid: conf.uid,\r\n            roomid: conf.room,\r\n        }));\r\n    }), {\r\n        initial: {\r\n            protover: 1,\r\n            platform: 'web',\r\n            clientver: '1.4.3',\r\n        },\r\n    },\r\n);\r\n\r\nconst invokeTransformer = new Middleware(\r\n    (ws, conf, client) => {\r\n        ws.on('sector', (sector) => {\r\n            if (!(sector instanceof DataSector)) return;\r\n            const msg = sector.data;\r\n            if (!('cmd' in msg)) return;\r\n            if (msg.cmd in conf.transformers) {\r\n                const transformer = conf.transformers[msg.cmd];\r\n                client.emit(transformer.name, transformer.transform(msg));\r\n            } else {\r\n                log('Untransformed data sector:');\r\n                log(msg);\r\n            }\r\n        });\r\n    }, {\r\n        transformers: fromPairs(all.map(t => [t.name, t])),\r\n        logUntransformed: true,\r\n    },\r\n);\r\n\r\nconst sendHeartbeat = new Middleware(\r\n    (ws, conf) => {\r\n        if (!conf.heartbeat.enabled) return;\r\n        const handle = setInterval(() => ws.send(new HeartbeatSector()), conf.heartbeat.interval);\r\n        const clear = () => clearInterval(handle);\r\n        ws.on('close', clear);\r\n        ws.on('error', clear);\r\n    }, {\r\n        heartbeat: {\r\n            enabled: true,\r\n            interval: 30000, // 30s\r\n        },\r\n    },\r\n);\r\n\r\nconst logLifecycle = new Middleware(\r\n    (ws, conf) => {\r\n        if (!conf.logging) return;\r\n        log(`Connecting to ${conf.url}...`);\r\n        ws.on('open', () => log('Connection opened, sending initial sector...'));\r\n        ws.on('sector', (sector) => {\r\n            if (sector instanceof InitAckSector) {\r\n                log(`Init ACK Sector received: room=${conf.room}, uid=${conf.uid}.`);\r\n            }\r\n        });\r\n        ws.on('close', (code, reason) => log(`Connection closed: code=${code}, reason=${reason}.`));\r\n        ws.on('error', error => log(`Server error: ${error}`));\r\n    }, {\r\n        logging: true,\r\n    },\r\n);\r\n\r\nconst middlewares = {\r\n    sendInitial,\r\n    invokeTransformer,\r\n    sendHeartbeat,\r\n    logLifecycle,\r\n};\r\n\r\nmodule.exports = {\r\n    Middleware,\r\n    ...middlewares,\r\n    all: Object.keys(middlewares).map(key => middlewares[key]),\r\n};\r\n"],"file":"middlewares.js"}